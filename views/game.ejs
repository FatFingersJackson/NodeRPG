<div id="gamesection">

    <table id="gameboard">
        
    </table>

    <div id="messagedialog" hidden>
        
    </div>

</div>

<script>




let sampleObjects = [
    {
        x: 2,
        y: 7,
        blocking : true,
        objectClass :"slime_red",
        name: "Red Slime"
    },
    {
        x: 3,
        y: 6,
        blocking : true,
        objectClass : "water_deep",
        name: "Deep Water"   
    }
];

var sampleMap = {
    height: 10,
    width: 10,
    terrain: "grass",
    mapObjects : sampleObjects, // <- for spawning
    tiles : [] // <- for gameplay queries
}
// ------ --------/////
// Above values will be loaded from file 
// Current map will be assigned to a variable 
// ------ --------/////

//const map = sampleMap;


function draMap(map)
{
    var tileGrid = "";
    for (i = 0 ; i < map.height;i++)
    {
        map.tiles[i] = [];
        tileGrid += '<tr>';
        for(var j = 0; j < map.width; j++)
        {
            tileGrid += `<td class="gametile ${map.terrain}" id="${j}-${i}"></td>`;
            
        }
        tileGrid += '</tr>';
    }
    //console.log('x-y'.split('-')[1])
    $('#gameboard').html(tileGrid)

    // Place objects in map. Also move map.objects to map.tiles
    // Map.objects is easier to write and view, but logic is easier with .tiles
    for(var i = 0; i < map.mapObjects.length; i++ )
    {
        let o = map.mapObjects[i];
        let x = o.x || 0;
        let y = o.y || 0;
        map.tiles[y][x] = o;
        let tileid = o.x + "-" + o.y;
        // TODO needs ID
        var mapO = `<div id="o${i}" class="${o.objectClass}"></div>`
        if(o.avatar)
        {
            $(map0).append( `<img class="avatar" src="./images/${o.avatar}" />` )
        }
        $('#'+tileid).append(mapO);
    }
}



/*-- PLAYER ---*/
/*
const mainPlayer = {
    x:0,
    y:0,
    avatar:`<div id="${playerUsername}" class="player"><img class="avatar" src="images/stiki.png"/></div>`,
    char: null,
    spawn: function(x,y){
        
        if( map.tiles[this.y][this.x] != null  )
        {
            // A logic to search empty space
        }
         this.char = $(this.avatar);
         $(`#${this.x}-${this.y}`).append( this.char );  
    },
    move: function(x,y){
        
        let xDest = x + this.x;
        let yDest = y+ this.y;
        
        if( map.tiles[yDest] == null || map.tiles[yDest][xDest] != null  )
        {
            
            return;
        }
        this.x = xDest;
        this.y = yDest;
        
        $(`#${xDest}-${yDest}`).append( $(this.char) );  
    }
};

mainPlayer.spawn();
*/

$(document).keypress(function(e) {
    clearMessage();
    movePlayer(e.which)
});

$(document).on('click', function(){
    clearMessage();
})

// These movefunctions are kind of single player
function movePlayer(dirInt){

    switch (dirInt) {
        //W
        case 119:
            mainPlayer.move(0,-1);
            break;
            //A
        case 97:
            mainPlayer.move(-1,0);
            break;
            //D
        case 100:
            mainPlayer.move(1,0);
            break;
            //S
        case 115:
            mainPlayer.move(0,1);
            break;
        default:
            break;
    }
}

function showMessage(message)
{
    $('#messagedialog').html(message)
    $('#messagedialog').show();
}

function clearMessage()
{
    $('#messagedialog').hide();
}

socket.on('connect',function(){
    socket.emit('playerSpawned',{ username: playerUsername })
});

socket.on('message',function(data){
              
                showMessage(data.message);
            });

socket.on('loadMap',function(data){
    console.log("loaded map",data.map)
    draMap(data.map)
});

socket.on('mapUpdate', function(data){
   

    let event = data.event;
    let obj = data.obj;
    
    if(event == "spawn")
    {
        console.log("SPAWN", data)
        
        let x = obj.x || 0;
        
        let y = obj.y || 0;

        let ogfx = $('<div>X</div>');

        ogfx.addClass('test');

        console.log(`#${x}-${y}`,$(`#${x}-${y}`).length );

        $(`#${x}-${y}`).append( ogfx );  
    }
    
});


</script>
